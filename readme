

      CS202 Project 3:  Two Dimensional Trees




Fill out the following information and include
this file with your project submission.


Name (from netID used for submission): Michael Cueno

Partner's name (if any): Patrick Burd  

             
Answer each of the following questions.

/****************************************************    
* List all of the source files you submitted.
*   (You must submit TDTree.java and Point.java)
*****************************************************/

  TDTree.java
  Point.java

/****************************************************    
* Describe the contents of a node in your implementation
*****************************************************/
		Point value; value stored
		Node lt; node of the root of the left subtree
		Node rt; node of the root of the right subtree
		int depth; distance from the root
		int height; distance from the nearest leaf
		int size; number of subnodes attached to this node
		double minX, minY, maxX, maxY; The min and max points for all 


/****************************************************    
*    Did you implement the default constructor TDTree()?
*****************************************************/
Yes
/****************************************************    
*    Did you implement size():
*    If so, is the runtime O(1)?
*****************************************************/
Yes, it is only a class variable.
/****************************************************    
*    Did you implement height():
*    If so, is the runtime O(1)?
*****************************************************/
Yes, it is only a class variable.
/****************************************************    
*    Did you implement insert(Point p)?
*    If so, is the runtime O(h) where h is the height
*       of the tree?  explain as necessary.
*****************************************************/
Basic implementation



/****************************************************    
*    Did you implement contains(Point p)?
*    If so, is the runtime O(h) where h is the height
*       of the tree?  explain as necessary.
*****************************************************/
Yes, contains is proportinal to the heighth of the tree,
only one path from the root to a leaf, if neccessary is visited during
the contains operations.

/****************************************************    
*    Did you implement 
*      minX(), maxX(), minY(), maxY()?
*    If so, are they all O(1)?
*****************************************************/
Yes, they are all O(1) due to a little book keeping
while inserting and deleting the nodes.

/****************************************************    
*    Did you implement printPreOrder()?
*****************************************************/
Yes

/****************************************************    
*    Did you implement delete()?
*    If so, is the runtime O(h) where h is the height
*       of the tree?  explain as necessary.
*****************************************************/
Yes, 
	The delete method takes one path down the tree and
	finds the node to delete, then calls findMin which 
	runs in O(h) time where h is the height of the node
	to be deleted, this algorithm is called recursively until
	a leaf is deleted. 
/****************************************************    
*    Did you implement draw()?
*****************************************************/
Yes


/****************************************************    
*    Did you implement nearest(Point p)?
*    If yes, explain your approach and how you made
*      as efficient as possible.
*****************************************************/
Yes, the functions recursively moves down the tree until 
if finds point p, then rolls out of the recursion and at 
each node (as it is rolling out) it compares the best 
distance found so far to the distance between the splitting
axis of the current node. If the dist(split axis) is less
than best so far, it means that the nearest point may be on the
other side of the cut. So we recursively check that side, else 
we do not check that subtree and continue to rollout of the 
recursion. 

/****************************************************    
*    Did you implement the "range" methods rangeSize()
*        and rangeQuery()?
*    If yes, explain your approach and how you made
*      as efficient as possible.
*****************************************************/
No,
    
/****************************************************    
*    Did you implement the balanced build-from-array 
*        Constructor?
*    If so, is the runtime O(n log n)?
*    explain
*****************************************************/
Yes, but we did not achieve the target runtime of O(nlogn),
we came close but by our evaluation it ended up being O(nlog^2n).
The function ended up being recursive in nature, and would split the array 
at the "median" value creating to sub arrays until there was a length of one using
the "median" value as the parent node.Depending on it's depth we resorted the array by either the 'x' or 'y'
value leading to the aforementioned runtime.

    
/****************************************************    
*    Did you enforce the incremental size-balanced property?
*    This affects insert and delete.
*****************************************************/
Yes, insert is working as expected and has been tested. Delete
on the other hand is working in most circumstances, but not 
all of the bugs have been flushed out.


/*****************************************************
* The nearest method and the range methods require "smart"
*   pruning of the search space to run efficiently,.
* Did you collect any data to indicate the effectiveness
*   of your approach?  For example, tracking the number
*   of nodes touched by the operations (so this number
*   can be related to the number of nodes in the tree)?
* If so, discuss some of your findings.
******************************************************/

We did not do any data collection but are pretty sure
from analysis that the function meets the runtime requirement




